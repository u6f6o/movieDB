import java.text.SimpleDateFormat

def globalVersion = new Version(currentVersion)

buildscript {
    repositories {
        maven {
            url "${artifactory_pluginsUrl}"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.0.9')
    }
}

allprojects {
	apply plugin: 'idea'
    apply plugin: 'artifactory'

	configurations.all {
	    resolutionStrategy {
	        failOnVersionConflict()
    	    force "org.springframework:spring-core:${springVersion}",
    	          "org.springframework:spring-context:${springVersion}",
    	          "org.springframework:spring-expression:${springVersion}",
                  "org.springframework:spring-beans:${springVersion}",
                  "org.hamcrest:hamcrest-core:1.3",
                  'org.slf4j:slf4j-api:1.7.2',
                  'junit:junit:4.11',
                  'xml-apis:xml-apis:2.0.2'
	    }
	}
    group = 'com.u6f6o.apps.moviedb'
    version = globalVersion
    status = version.status
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'groovy'
    apply plugin: 'findbugs'

	sourceCompatibility = 1.6
	targetCompatibility = 1.6
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

configurations {
    published
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            ivy {
                ivyLayout = '[organization]/[module]/ivy-[revision].xml'
                artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
                mavenCompatible = false
            }
        }
        defaults {
            publishConfigs('archives', 'published')
            properties = ['build.status': "$it.project.status".toString()]
            publishPom = false
            publishIvy = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
            username = "${artifactory_user}"
            password = "${artifactory_password}"

        }
    }
}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}